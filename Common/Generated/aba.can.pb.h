/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_ABA_CAN_ABA_CAN_PB_H_INCLUDED
#define PB_ABA_CAN_ABA_CAN_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Available CAN devices. */
typedef enum _aba_can_eCanDevice {
    aba_can_eCanDevice_MCAN0 = 0,
    aba_can_eCanDevice_MCAN1 = 1
} aba_can_eCanDevice;

/* Available operating modes. */
typedef enum _aba_can_eCanMode {
    aba_can_eCanMode_MODE_CLASSIC = 0,
    aba_can_eCanMode_MODE_FDNISO = 1,
    aba_can_eCanMode_MODE_FDISO = 2
} aba_can_eCanMode;

/* Protobuf does not support flag enums.
 Make sure the format assigned in message is uint32 and not eCanOperationMode */
typedef enum _aba_can_eCanSpecialMode {
    aba_can_eCanSpecialMode_MODE_NORMAL = 0,
    aba_can_eCanSpecialMode_MODE_LISTEN = 1,
    aba_can_eCanSpecialMode_MODE_LOOPBACK_INT = 2,
    aba_can_eCanSpecialMode_MODE_LOOPBACK_EXT = 3,
    aba_can_eCanSpecialMode_MODE_INIT = 4
} aba_can_eCanSpecialMode;

/* CAN frame format types */
typedef enum _aba_can_eCanFrameType {
    aba_can_eCanFrameType_TYPE_CLASSIC_STD = 0,
    aba_can_eCanFrameType_TYPE_CLASSIC_XTD = 1,
    aba_can_eCanFrameType_TYPE_FD_STD = 2,
    aba_can_eCanFrameType_TYPE_FD_XTD = 3,
    aba_can_eCanFrameType_TYPE_FDBRS_STD = 4,
    aba_can_eCanFrameType_TYPE_FDBRS_XTD = 5
} aba_can_eCanFrameType;

typedef enum _aba_can_eCanCommands {
    aba_can_eCanCommands_SET_BITRATE = 0,
    aba_can_eCanCommands_GET_BITRATE = 1,
    aba_can_eCanCommands_RX_MSG = 2,
    aba_can_eCanCommands_TX_MSG = 3,
    aba_can_eCanCommands_TX_TIMEOUT = 4,
    aba_can_eCanCommands_SET_MODE = 5,
    aba_can_eCanCommands_GET_MODE = 6,
    aba_can_eCanCommands_GET_ERRORCNT = 7,
    aba_can_eCanCommands_RESET = 8,
    aba_can_eCanCommands_PHY_MAINTAIN = 9,
    aba_can_eCanCommands_SET_PERSISTANCE = 10,
    aba_can_eCanCommands_GET_PERSISTANCE = 11,
    aba_can_eCanCommands_DBG_READ_REG = 64
} aba_can_eCanCommands;

typedef enum _aba_can_eCanLastErrorCode {
    aba_can_eCanLastErrorCode_NO_ERROR = 0,
    aba_can_eCanLastErrorCode_STUFF_ERROR = 1,
    aba_can_eCanLastErrorCode_FORM_ERROR = 2,
    aba_can_eCanLastErrorCode_ACK_ERROR = 3,
    aba_can_eCanLastErrorCode_BIT1_ERROR = 4,
    aba_can_eCanLastErrorCode_BIT0_ERROR = 5,
    aba_can_eCanLastErrorCode_CRC_ERROR = 6,
    aba_can_eCanLastErrorCode_NO_CHANGE = 7
} aba_can_eCanLastErrorCode;

/* Struct definitions */
/* Presets are stored within the PC application.
 Writing registers values allows configuration of non-standard bitrates. */
typedef struct _aba_can_CanSpeed {
    aba_can_eCanDevice device;
    uint32_t nsjw;
    uint32_t nseg1;
    uint32_t nseg2;
    uint32_t nscale;
    uint32_t dsjw;
    uint32_t dseg1;
    uint32_t dseg2;
    uint32_t dscale;
    uint32_t tdc;
    uint32_t tdcf;
    uint32_t tdco;
} aba_can_CanSpeed;

/* CAN devices can be set to CAN2.0, NON-ISO and ISO CAN-FD.
 It's also possible to enter listen-only mode. */
typedef struct _aba_can_CanMode {
    aba_can_eCanDevice device;
    aba_can_eCanMode mode;
    aba_can_eCanSpecialMode specialMode;
    uint32_t autoRetryEnabled;
} aba_can_CanMode;

/* Get the transmit and receive error counter values. */
typedef struct _aba_can_CanError {
    aba_can_eCanDevice device;
    uint32_t busOff;
    uint32_t rec;
    uint32_t tec;
    uint32_t lec;
    uint64_t timestamp;
} aba_can_CanError;

typedef PB_BYTES_ARRAY_T(64) aba_can_CanMessage_message_t;
/* CAN message object.
 Direction (Tx/Rx) is handled by lower protocol layer. */
typedef struct _aba_can_CanMessage {
    aba_can_eCanDevice device;
    uint32_t canId;
    uint32_t dlc;
    uint32_t frameType;
    aba_can_CanMessage_message_t message;
    uint64_t timestamp;
} aba_can_CanMessage;

typedef struct _aba_can_CanDeviceWrapper {
    aba_can_eCanDevice device;
    uint32_t flag;
} aba_can_CanDeviceWrapper;

typedef struct _aba_can_DbgReadRegister {
    uint32_t addr;
    uint32_t value;
} aba_can_DbgReadRegister;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _aba_can_eCanDevice_MIN aba_can_eCanDevice_MCAN0
#define _aba_can_eCanDevice_MAX aba_can_eCanDevice_MCAN1
#define _aba_can_eCanDevice_ARRAYSIZE ((aba_can_eCanDevice)(aba_can_eCanDevice_MCAN1+1))

#define _aba_can_eCanMode_MIN aba_can_eCanMode_MODE_CLASSIC
#define _aba_can_eCanMode_MAX aba_can_eCanMode_MODE_FDISO
#define _aba_can_eCanMode_ARRAYSIZE ((aba_can_eCanMode)(aba_can_eCanMode_MODE_FDISO+1))

#define _aba_can_eCanSpecialMode_MIN aba_can_eCanSpecialMode_MODE_NORMAL
#define _aba_can_eCanSpecialMode_MAX aba_can_eCanSpecialMode_MODE_INIT
#define _aba_can_eCanSpecialMode_ARRAYSIZE ((aba_can_eCanSpecialMode)(aba_can_eCanSpecialMode_MODE_INIT+1))

#define _aba_can_eCanFrameType_MIN aba_can_eCanFrameType_TYPE_CLASSIC_STD
#define _aba_can_eCanFrameType_MAX aba_can_eCanFrameType_TYPE_FDBRS_XTD
#define _aba_can_eCanFrameType_ARRAYSIZE ((aba_can_eCanFrameType)(aba_can_eCanFrameType_TYPE_FDBRS_XTD+1))

#define _aba_can_eCanCommands_MIN aba_can_eCanCommands_SET_BITRATE
#define _aba_can_eCanCommands_MAX aba_can_eCanCommands_DBG_READ_REG
#define _aba_can_eCanCommands_ARRAYSIZE ((aba_can_eCanCommands)(aba_can_eCanCommands_DBG_READ_REG+1))

#define _aba_can_eCanLastErrorCode_MIN aba_can_eCanLastErrorCode_NO_ERROR
#define _aba_can_eCanLastErrorCode_MAX aba_can_eCanLastErrorCode_NO_CHANGE
#define _aba_can_eCanLastErrorCode_ARRAYSIZE ((aba_can_eCanLastErrorCode)(aba_can_eCanLastErrorCode_NO_CHANGE+1))

#define aba_can_CanSpeed_device_ENUMTYPE aba_can_eCanDevice

#define aba_can_CanMode_device_ENUMTYPE aba_can_eCanDevice
#define aba_can_CanMode_mode_ENUMTYPE aba_can_eCanMode
#define aba_can_CanMode_specialMode_ENUMTYPE aba_can_eCanSpecialMode

#define aba_can_CanError_device_ENUMTYPE aba_can_eCanDevice

#define aba_can_CanMessage_device_ENUMTYPE aba_can_eCanDevice

#define aba_can_CanDeviceWrapper_device_ENUMTYPE aba_can_eCanDevice



/* Initializer values for message structs */
#define aba_can_CanSpeed_init_default            {_aba_can_eCanDevice_MIN, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define aba_can_CanMode_init_default             {_aba_can_eCanDevice_MIN, _aba_can_eCanMode_MIN, _aba_can_eCanSpecialMode_MIN, 0}
#define aba_can_CanError_init_default            {_aba_can_eCanDevice_MIN, 0, 0, 0, 0, 0}
#define aba_can_CanMessage_init_default          {_aba_can_eCanDevice_MIN, 0, 0, 0, {0, {0}}, 0}
#define aba_can_CanDeviceWrapper_init_default    {_aba_can_eCanDevice_MIN, 0}
#define aba_can_DbgReadRegister_init_default     {0, 0}
#define aba_can_CanSpeed_init_zero               {_aba_can_eCanDevice_MIN, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define aba_can_CanMode_init_zero                {_aba_can_eCanDevice_MIN, _aba_can_eCanMode_MIN, _aba_can_eCanSpecialMode_MIN, 0}
#define aba_can_CanError_init_zero               {_aba_can_eCanDevice_MIN, 0, 0, 0, 0, 0}
#define aba_can_CanMessage_init_zero             {_aba_can_eCanDevice_MIN, 0, 0, 0, {0, {0}}, 0}
#define aba_can_CanDeviceWrapper_init_zero       {_aba_can_eCanDevice_MIN, 0}
#define aba_can_DbgReadRegister_init_zero        {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define aba_can_CanSpeed_device_tag              1
#define aba_can_CanSpeed_nsjw_tag                2
#define aba_can_CanSpeed_nseg1_tag               3
#define aba_can_CanSpeed_nseg2_tag               4
#define aba_can_CanSpeed_nscale_tag              5
#define aba_can_CanSpeed_dsjw_tag                6
#define aba_can_CanSpeed_dseg1_tag               7
#define aba_can_CanSpeed_dseg2_tag               8
#define aba_can_CanSpeed_dscale_tag              9
#define aba_can_CanSpeed_tdc_tag                 10
#define aba_can_CanSpeed_tdcf_tag                11
#define aba_can_CanSpeed_tdco_tag                12
#define aba_can_CanMode_device_tag               1
#define aba_can_CanMode_mode_tag                 2
#define aba_can_CanMode_specialMode_tag          3
#define aba_can_CanMode_autoRetryEnabled_tag     4
#define aba_can_CanError_device_tag              1
#define aba_can_CanError_busOff_tag              2
#define aba_can_CanError_rec_tag                 3
#define aba_can_CanError_tec_tag                 4
#define aba_can_CanError_lec_tag                 5
#define aba_can_CanError_timestamp_tag           6
#define aba_can_CanMessage_device_tag            1
#define aba_can_CanMessage_canId_tag             2
#define aba_can_CanMessage_dlc_tag               3
#define aba_can_CanMessage_frameType_tag         4
#define aba_can_CanMessage_message_tag           5
#define aba_can_CanMessage_timestamp_tag         6
#define aba_can_CanDeviceWrapper_device_tag      1
#define aba_can_CanDeviceWrapper_flag_tag        2
#define aba_can_DbgReadRegister_addr_tag         1
#define aba_can_DbgReadRegister_value_tag        2

/* Struct field encoding specification for nanopb */
#define aba_can_CanSpeed_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    device,            1) \
X(a, STATIC,   SINGULAR, UINT32,   nsjw,              2) \
X(a, STATIC,   SINGULAR, UINT32,   nseg1,             3) \
X(a, STATIC,   SINGULAR, UINT32,   nseg2,             4) \
X(a, STATIC,   SINGULAR, UINT32,   nscale,            5) \
X(a, STATIC,   SINGULAR, UINT32,   dsjw,              6) \
X(a, STATIC,   SINGULAR, UINT32,   dseg1,             7) \
X(a, STATIC,   SINGULAR, UINT32,   dseg2,             8) \
X(a, STATIC,   SINGULAR, UINT32,   dscale,            9) \
X(a, STATIC,   SINGULAR, UINT32,   tdc,              10) \
X(a, STATIC,   SINGULAR, UINT32,   tdcf,             11) \
X(a, STATIC,   SINGULAR, UINT32,   tdco,             12)
#define aba_can_CanSpeed_CALLBACK NULL
#define aba_can_CanSpeed_DEFAULT NULL

#define aba_can_CanMode_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    device,            1) \
X(a, STATIC,   SINGULAR, UENUM,    mode,              2) \
X(a, STATIC,   SINGULAR, UENUM,    specialMode,       3) \
X(a, STATIC,   SINGULAR, UINT32,   autoRetryEnabled,   4)
#define aba_can_CanMode_CALLBACK NULL
#define aba_can_CanMode_DEFAULT NULL

#define aba_can_CanError_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    device,            1) \
X(a, STATIC,   SINGULAR, UINT32,   busOff,            2) \
X(a, STATIC,   SINGULAR, UINT32,   rec,               3) \
X(a, STATIC,   SINGULAR, UINT32,   tec,               4) \
X(a, STATIC,   SINGULAR, UINT32,   lec,               5) \
X(a, STATIC,   SINGULAR, UINT64,   timestamp,         6)
#define aba_can_CanError_CALLBACK NULL
#define aba_can_CanError_DEFAULT NULL

#define aba_can_CanMessage_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    device,            1) \
X(a, STATIC,   SINGULAR, UINT32,   canId,             2) \
X(a, STATIC,   SINGULAR, UINT32,   dlc,               3) \
X(a, STATIC,   SINGULAR, UINT32,   frameType,         4) \
X(a, STATIC,   SINGULAR, BYTES,    message,           5) \
X(a, STATIC,   SINGULAR, UINT64,   timestamp,         6)
#define aba_can_CanMessage_CALLBACK NULL
#define aba_can_CanMessage_DEFAULT NULL

#define aba_can_CanDeviceWrapper_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    device,            1) \
X(a, STATIC,   SINGULAR, UINT32,   flag,              2)
#define aba_can_CanDeviceWrapper_CALLBACK NULL
#define aba_can_CanDeviceWrapper_DEFAULT NULL

#define aba_can_DbgReadRegister_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   addr,              1) \
X(a, STATIC,   SINGULAR, UINT32,   value,             2)
#define aba_can_DbgReadRegister_CALLBACK NULL
#define aba_can_DbgReadRegister_DEFAULT NULL

extern const pb_msgdesc_t aba_can_CanSpeed_msg;
extern const pb_msgdesc_t aba_can_CanMode_msg;
extern const pb_msgdesc_t aba_can_CanError_msg;
extern const pb_msgdesc_t aba_can_CanMessage_msg;
extern const pb_msgdesc_t aba_can_CanDeviceWrapper_msg;
extern const pb_msgdesc_t aba_can_DbgReadRegister_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define aba_can_CanSpeed_fields &aba_can_CanSpeed_msg
#define aba_can_CanMode_fields &aba_can_CanMode_msg
#define aba_can_CanError_fields &aba_can_CanError_msg
#define aba_can_CanMessage_fields &aba_can_CanMessage_msg
#define aba_can_CanDeviceWrapper_fields &aba_can_CanDeviceWrapper_msg
#define aba_can_DbgReadRegister_fields &aba_can_DbgReadRegister_msg

/* Maximum encoded size of messages (where known) */
#define aba_can_CanDeviceWrapper_size            8
#define aba_can_CanError_size                    37
#define aba_can_CanMessage_size                  97
#define aba_can_CanMode_size                     12
#define aba_can_CanSpeed_size                    68
#define aba_can_DbgReadRegister_size             12

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
